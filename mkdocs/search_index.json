{
    "docs": [
        {
            "location": "/", 
            "text": "Environment Extension\n\n\nmdx_environment is a Python Markdown extension that adds tags for content based on environment variables.\n\n\nEnvironment values\n\n\nTo add values to your document that are stored in environment variables.\n\n\nMinimal\n\n\nsyntax\n:\n\n\n*Host*: \\env{MY_VAR}\n\n\n\n\nexport MY_VAR=\nandrewjrobinson.github.io\n\n\n\n\n\nExample\n:\n\n\nHost\n: \nandrewjrobinson.github.io\n\n\nhtml\n:\n\n\np\n\n    \nem\nHost\n/em\n: \n    \nspan class=\nenvironment_env\n id=\nenv0\nandrewjrobinson.github.io\n/span\n\n\n/p\n\n\n\n\n\nOperations\n\n\nYou can process the value with some basic operations\n\n\nexport CAMEL=\ntHe CaMeL sAiD\n\n\n\n\n\n\\env{CAMEL}{upper}\n# \nTHE CAMEL SAID\n\n\n\\env{CAMEL}{lower}\n# \nthe camel said\n\n\n\\env{CAMEL}{title}\n# \nThe Camel Said\n\n\n\\env{CAMEL}{sentence}\n# \nThe camel said\n\n\n\n\n\nConditional content\n\n\nTODO: finish this documentation\n\n\nSet / unset variables\n\n\nsyntax\n:\n\n\n\\if{MY_VAR}\nContent that is only rendered if MY_VAR is set and has a value other than: \n0\n, \n, \nfalse\n, \nf\n, \nno\n, \nn\n\n\\endif\n\n\\if{!MY_VAR}\nContent that is only rendered if MY_VAR is NOT set or has a value: \n0\n, \n, \nfalse\n, \nf\n, \nno\n, \nn\n\n\\endif\n\n\n\n\n\nOperators\n\n\nYou can check that an Environment variable matches a constant with various operators\n\n\nString comparisons\n:\n\n\nNOTE: No quoting and cannot include spaces at ends or '}'\n\n\nI.e. 2 is not the same as 2.0\n\n\n\\if{MY_NUM == 2}\n\\if{MY_STR == Hello world}\n\n\\if{MY_NUM != 2}\n\n\n\n\nNumber comparisons\n:\n\n\n\\if{MY_NUM \n 2}\n\n\\if{MY_NUM \n 2}\n\n\\if{MY_NUM \n= 2}\n\n\\if{MY_NUM \n= 2}\n\n\n\n\nTypical usage\n\n\n_MD_ENV_LOADED_ variable\n\n\nThe extension will print a warning on the python logger if the _MD_ENV_LOADED_ environment variable is\nnot set.  This makes it easy to remember that you forgot to load your environment variables.  It\nis recommended that you create a env/defaults.sh script that you \nsource\n from each of your context \nscripts.\n\n\nSuggested directory structure\n\n\nIt is recommended that you create a \ndefaults.sh\n file that is \nsourced\n by all your context specific\nenvironment files.  If you put the _MD_ENV_LOADED_ variable in the defaults.sh file then users will\nautomatically get a warning message if they forget to \nsource\n one of your context files.\n\n\nenv/defaults.sh\n:\n\n\n#!/bin/bash\n# default variables used by workshops\n\n# Hide the warning about env not loaded\nexport _MD_ENV_LOADED_=1\n\nexport MY_VAR=\nandrewjrobinson.github.io\n\n\nexport CAMEL=\nI have one hUMp\n\n\n\n\n\nenv/context1.sh\n:\n\n\n#!/bin/bash\n# overrides for context 1\n\n## import defaults ##\nsource env/defaults.sh\n\n## Override values for this context ##\nexport CAMEL=\nI have two hUmPs\n\n\n\n\n\nenv/env-examples.sh\n:\n\n\n#!/bin/bash\n# overrides for this documentation\n\n## import defaults ##\nsource env/defaults.sh\n\n## Override values for this context ##\nexport CAMEL=\ntHe CaMeL sAiD", 
            "title": "Home"
        }, 
        {
            "location": "/#environment-extension", 
            "text": "mdx_environment is a Python Markdown extension that adds tags for content based on environment variables.", 
            "title": "Environment Extension"
        }, 
        {
            "location": "/#environment-values", 
            "text": "To add values to your document that are stored in environment variables.", 
            "title": "Environment values"
        }, 
        {
            "location": "/#minimal", 
            "text": "syntax :  *Host*: \\env{MY_VAR}  export MY_VAR= andrewjrobinson.github.io   Example :  Host :  andrewjrobinson.github.io  html :  p \n     em Host /em : \n     span class= environment_env  id= env0 andrewjrobinson.github.io /span  /p", 
            "title": "Minimal"
        }, 
        {
            "location": "/#operations", 
            "text": "You can process the value with some basic operations  export CAMEL= tHe CaMeL sAiD   \\env{CAMEL}{upper}\n#  THE CAMEL SAID \n\n\\env{CAMEL}{lower}\n#  the camel said \n\n\\env{CAMEL}{title}\n#  The Camel Said \n\n\\env{CAMEL}{sentence}\n#  The camel said", 
            "title": "Operations"
        }, 
        {
            "location": "/#conditional-content", 
            "text": "TODO: finish this documentation", 
            "title": "Conditional content"
        }, 
        {
            "location": "/#set-unset-variables", 
            "text": "syntax :  \\if{MY_VAR}\nContent that is only rendered if MY_VAR is set and has a value other than:  0 ,  ,  false ,  f ,  no ,  n \n\\endif\n\n\\if{!MY_VAR}\nContent that is only rendered if MY_VAR is NOT set or has a value:  0 ,  ,  false ,  f ,  no ,  n \n\\endif", 
            "title": "Set / unset variables"
        }, 
        {
            "location": "/#operators", 
            "text": "You can check that an Environment variable matches a constant with various operators  String comparisons :  NOTE: No quoting and cannot include spaces at ends or '}'  I.e. 2 is not the same as 2.0  \\if{MY_NUM == 2}\n\\if{MY_STR == Hello world}\n\n\\if{MY_NUM != 2}  Number comparisons :  \\if{MY_NUM   2}\n\n\\if{MY_NUM   2}\n\n\\if{MY_NUM  = 2}\n\n\\if{MY_NUM  = 2}", 
            "title": "Operators"
        }, 
        {
            "location": "/#typical-usage", 
            "text": "", 
            "title": "Typical usage"
        }, 
        {
            "location": "/#95md95env95loaded95-variable", 
            "text": "The extension will print a warning on the python logger if the _MD_ENV_LOADED_ environment variable is\nnot set.  This makes it easy to remember that you forgot to load your environment variables.  It\nis recommended that you create a env/defaults.sh script that you  source  from each of your context \nscripts.", 
            "title": "_MD_ENV_LOADED_ variable"
        }, 
        {
            "location": "/#suggested-directory-structure", 
            "text": "It is recommended that you create a  defaults.sh  file that is  sourced  by all your context specific\nenvironment files.  If you put the _MD_ENV_LOADED_ variable in the defaults.sh file then users will\nautomatically get a warning message if they forget to  source  one of your context files.  env/defaults.sh :  #!/bin/bash\n# default variables used by workshops\n\n# Hide the warning about env not loaded\nexport _MD_ENV_LOADED_=1\n\nexport MY_VAR= andrewjrobinson.github.io \n\nexport CAMEL= I have one hUMp   env/context1.sh :  #!/bin/bash\n# overrides for context 1\n\n## import defaults ##\nsource env/defaults.sh\n\n## Override values for this context ##\nexport CAMEL= I have two hUmPs   env/env-examples.sh :  #!/bin/bash\n# overrides for this documentation\n\n## import defaults ##\nsource env/defaults.sh\n\n## Override values for this context ##\nexport CAMEL= tHe CaMeL sAiD", 
            "title": "Suggested directory structure"
        }
    ]
}